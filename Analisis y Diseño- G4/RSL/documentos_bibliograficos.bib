@article{J.IniguezBanegasR.GuamanQuinche2016,
author = {{J. I{\~{n}}iguez Banegas, R. Guam{\'{a}}n Quinch{\'{e}}}, R. Figueroa Diaz y F. Ajila Zaquinaula},
journal = {Latin American Journal of Computing Faculty of Systems Engineering Escuela Polit{\'{e}}cnica Nacional},
pages = {8},
title = {{Revisi{\'{o}}n Sistem{\'{a}}tica de Literatura: Inyecci{\'{o}}n SQL en Aplicaciones web Systematic Literature Review: SQL Injection in Web Applications}},
volume = {3},
year = {2016}
}
@inproceedings{Torres-Carrion2018,
author = {Torres-Carri{\'{o}}n, Pablo Vicente and Gonz{\'{a}}lez-Gonz{\'{a}}lez, Carina Soledad and Aciar, Silvana and Rodr$\backslash$'$\backslash$iguez-Morales, Germania},
booktitle = {2018 IEEE Global Engineering Education Conference (EDUCON)},
pages = {1364--1373},
title = {{Methodology for systematic literature review applied to engineering and education}},
year = {2018}
}
@article{Hydara2015,
author = {Hydara, Isatou and Sultan, Abu Bakar Md and Zulzalil, Hazura and Admodisastro, Novia},
journal = {Information and Software Technology},
pages = {170--186},
publisher = {Elsevier},
title = {{Current state of research on cross-site scripting (XSS)--A systematic literature review}},
volume = {58},
year = {2015}
}
@article{Neiva2016,
author = {Neiva, Fr{\^{a}}ncila Weidt and David, Jos{\'{e}} Maria N and Braga, Regina and Campos, Fernanda},
journal = {Information and Software Technology},
pages = {137--150},
publisher = {Elsevier},
title = {{Towards pragmatic interoperability to support collaboration: A systematic review and mapping of the literature}},
volume = {72},
year = {2016}
}
@book{Petticrew2008,
author = {Petticrew, Mark and Roberts, Helen},
publisher = {John Wiley {\&} Sons},
title = {{Systematic reviews in the social sciences: A practical guide}},
year = {2008}
}
@article{Kitchenham2011,
author = {Kitchenham, Barbara A and Budgen, David and Brereton, O Pearl},
journal = {Information and Software Technology},
number = {6},
pages = {638--651},
publisher = {Elsevier},
title = {{Using mapping studies as the basis for further research--a participant-observer case study}},
volume = {53},
year = {2011}
}
@article{Brereton2007,
author = {Brereton, Pearl and Kitchenham, Barbara A and Budgen, David and Turner, Mark and Khalil, Mohamed},
journal = {Journal of systems and software},
number = {4},
pages = {571--583},
publisher = {Elsevier},
title = {{Lessons from applying the systematic literature review process within the software engineering domain}},
volume = {80},
year = {2007}
}
@article{Anuar2016,
abstract = {The quality of Software Requirements Specification (SRS) is crucial in order to ensure successful project completion. SRS of poor quality usually lacks of quality attributes such as completeness, accuracy and disambiguity. Boilerplate is a technique used to deal with problems in SRS. However, study on the coverage of boilerplate contribution especially in improving SRS quality is limited. This paper presents Systematic Literature Review (SLR) on problems in SRS and boilerplates. The review that covers literature from 1997 to 2015 reveals that 1) poor quality SRS is the most popular problem among the other five SRS problems discovered, 2) Boilerplate technique has been applied to cope with SRS of poor quality, where disambiguity has been found the most popular quality attribute.},
author = {Anuar, Umairah and Ahmad, Sabrina and Emran, Nurul A.},
doi = {10.1109/MySEC.2015.7475203},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/anuar2015.pdf:pdf},
isbn = {9781467382267},
journal = {2015 9th Malaysian Software Engineering Conference, MySEC 2015},
keywords = {SRS quality,boilerplates,software requirements specification},
pages = {99--105},
title = {{A simplified systematic literature review: Improving Software Requirements Specification quality with boilerplates}},
year = {2016}
}
@article{Asadabadi2020,
abstract = {The requirement specification process is an important part of a project and has the potential to prevent problems that may last for years after a project is delivered. Previous studies on the requirement specification process have focused on clarifying stated fuzzy terms in software requirement engineering. However, in many projects there is information that is not stated, but it is implied and can be inferred. This hidden information is usually ignored due to the assumption that â€˜the provider understands what they mean/need'. This assumption is not always true. Such information, if extracted, may include fuzzy terms, namely hidden fuzzy terms (HFTs), which need specification. Therefore, these fuzzy terms have to be identified and then specified to avoid potential future consequences. This study proposes an algorithm to extract the hidden fuzzy terms, utilises a fuzzy inference system (FIS) to specify them, and applies the best worst multi-criteria decision making method (BWM) to evaluate the delivered product and measure the performance of the provider. The model is then used to examine a case from Defence Housing Australia. Such evaluation and measurement enable the project owner/manager to have a transparent basis to support decisions later in different phases of the project, and to ultimately reduce the likelihood of conflict and the receipt of an unsatisfactory product.},
author = {Asadabadi, Mehdi Rajabi and Chang, Elizabeth and Zwikael, Ofer and Saberi, Morteza and Sharpe, Keiran},
doi = {10.1016/j.fss.2019.06.017},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/asadabadi2019.pdf:pdf},
issn = {01650114},
journal = {Fuzzy Sets and Systems},
keywords = {BWM,Fuzzy inference system,Hidden fuzzy,MCDM,Requirement specification},
pages = {127--145},
publisher = {Elsevier B.V.},
title = {{Hidden fuzzy information: Requirement specification and measurement of project provider performance using the best worst method}},
url = {https://doi.org/10.1016/j.fss.2019.06.017},
volume = {383},
year = {2020}
}
@article{Pinquie2018,
abstract = {The design of engineered socio-technical systems relies on a value chain within which suppliers must cope with larger and larger sets of requirements. Although 70 {\%} of the total life cycle cost is committed during the concept phase and most industrial projects originally fail due to poor requirements engineering [1], very few methods and tools exist to support suppliers. In this paper, we propose to methodologically integrate data science techniques into a collaborative requirement mining framework to enable suppliers to gain insight and discover opportunities in a massive set of requirements. The proposed workflow is a five-activity process including: (1) the extraction of requirements from documents and (2) the analysis of their quality by using natural language processing techniques; (3) the segmentation of requirements into communities using text mining and graph theory; (4) the collaborative and multidisciplinary estimation of decision making criteria; and (5) the reporting of estimations with an analytical dashboard of statistical indicators. We conclude that the methodological integration of data science techniques is an effective way to gain insight from hundreds or thousands of requirements before making informed decisions early on. The software prototype that supports our workflow is a JAVA web application developed on top of a graph-oriented data model implemented with the NoSQL NEO4J graph database. As a future work, the semi-structured as-required baseline could be a sound input to feed a formal approach, such as model- and simulation-based systems engineering.},
author = {Pinqui{\'{e}}, Romain and V{\'{e}}ron, Philippe and Segonds, Fr{\'{e}}d{\'{e}}ric and Crou{\'{e}}, Nicolas},
doi = {10.1016/j.procir.2018.03.228},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/10.1016@j.procir.2018.03.228.pdf:pdf},
isbn = {0000000000},
issn = {22128271},
journal = {Procedia CIRP},
keywords = {Data mining,Decision-Making,Requirement,Specification},
pages = {410--415},
publisher = {Elsevier B.V.},
title = {{A requirement mining framework to support complex sub-systems suppliers}},
url = {https://doi.org/10.1016/j.procir.2018.03.228},
volume = {70},
year = {2018}
}
@article{Alferillo2015,
abstract = {This paper presents the process and outcomes of a systematic literature mapping about the application of the Use Cases technique for software requirements specification in distributed software development environments. The purpose is to identify which methods, tools and methodologies are reported in literature as more frequently used and how the Use Case technique is applied when the project team is not collocated.},
author = {Alferillo, Viviana and Lund, Mar{\'{i}}a In{\'{e}}s and Matturro, Gerardo},
doi = {10.1109/CLEI.2015.7360012},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/alferillo2015.pdf:pdf},
isbn = {9781467391436},
journal = {Proceedings - 2015 41st Latin American Computing Conference, CLEI 2015},
keywords = {Systematic literature mapping,distributed software development,requirements engineering,use cases},
title = {{Use case technique for requirements modeling in distributed development environments: A mapping study}},
year = {2015}
}
@article{Yue2015,
abstract = {The transition from an informal requirements specification in natural language to a structured, precise specification is an important challenge in practice. It is particularly so for object-oriented methods, defined in the context of the OMG's Model Driven Architecture (MDA), where a key step is to transition from a use case model to an analysis model. However, providing automated support for this transition is challenging, mostly because, in practice, requirements are expressed in natural language and are much less structured than other kinds of development artifacts. Such an automated transformation would enable at least the generation of an initial, likely incomplete, analysis model and enable automated traceability from requirements to code, through various intermediate models. In this article, we propose a method and a tool called aToucan, building on existing work, to automatically generate a UML analysis model comprising class, sequence and activity diagrams from a use case model and to automatically establish traceability links between model elements of the use case model and the generated analysis model. Note that our goal is to save effort through automated support, not to replace human abstraction and decision making. Seven (six) case studies were performed to compare class (sequence) diagrams generated by aToucan to the ones created by experts, Masters students, and trained, fourth-year undergraduate students. Results show that aToucan performs well regarding consistency (e.g., 88{\%} class diagram consistency) and completeness (e.g., 80{\%} class completeness) when comparing generated class diagrams with reference class diagrams created by experts and Masters students. Similarly, sequence diagrams automatically generated by aToucan are highly consistent with the ones devised by experts and are also rather complete, for instance, 91{\%} and 97{\%} message consistency and completeness, respectively. Further, statistical tests show that aToucan significantly outperforms fourth-year engineering students in this respect, thus demonstrating the value of automation. We also conducted two industrial case studies demonstrating the applicability of aToucan in two different industrial domains. Results showed that the vast majority of model elements generated by aToucan are correct and that therefore, in practice, such models would be good initial models to refine and augment so as to converge towards to correct and complete analysis models. A performance analysis shows that the execution time of aToucan (when generating class and sequence diagrams) is dependent on the number of simple sentences contained in the use case model and remains within a range of a few minutes. Five different software system descriptions (18 use cases altogether) were performed to evaluate the generation of activity diagrams. Results show that aToucan can generate 100{\%} complete and correct control flow information of activity diagrams and on average 85{\%} data flAow information completeness. Moreover, we show that aToucan outperforms three commercial tools in terms of activity diagram generation.},
author = {Yue, Tao and Briand, Lionel C. and Labiche, Yvan},
doi = {10.1145/2699697},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/yue2015.pdf:pdf},
issn = {15577392},
journal = {ACM Transactions on Software Engineering and Methodology},
keywords = {Activity diagram,Analysis model,Automation,Class diagram,Sequence diagram,Traceability,Transformation,UML,Use case modeling},
number = {3},
title = {{aToucan: An automated framework to derive UML analysis models from use case models}},
volume = {24},
year = {2015}
}
@article{Tiwari2019,
abstract = {Use case modeling refers to the process of identifying scenarios written in some natural language text, particularly to capture interactions between the system and associated actors. Several approaches have been proposed to maintain the synergy of use cases with other software models, but no systematic transformation approach is available to extract use case scenarios from the textual requirements specification. In this paper, we propose a systematic transformation approach that automatically extracts various use case elements from textual problem specifications. The approach uses Natural Language (NL) parser to identify Parts-Of-Speech (POS) tags, Type Dependencies (TDs) and semantic roles from the input text specification to populate use case elements. It further makes use of the questionnaire-based approach to develop the remaining unpopulated parts of the use case template. The paper demonstrates the applicability of the proposed approach by applying both industry and research-level case studies. The results highlight that the generated output is correct, consistent, non-redundant and complete, and helpful to use case developers in further analysis and documentation.},
author = {Tiwari, Saurabh and Ameta, Deepti and Banerjee, Asim},
doi = {10.1145/3299771.3299774},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/tiwari2019.pdf:pdf},
isbn = {9781450362153},
journal = {ACM International Conference Proceeding Series},
keywords = {Case study,Natural Language Processing (NLP),Questionnaire based analysis,Tool support,Use case modeling},
title = {{An approach to identify use case scenarios from textual requirements specification}},
year = {2019}
}
@article{Zhang2016,
abstract = {Requirements inspection is a well-known method for detecting defects. Various defect detection techniques for requirements inspection have been widely applied in practice such as checklist and defect-based techniques. Use case modelling is a widely accepted requirements specification method in practice; therefore, inspecting defects in use case models in a cost-effective manner is an important challenge. However, it does not exist a systematic mutation analysis approach for evaluating inspection techniques for use case models. In this paper we present the methodology we followed to systematically derive mutation operators for use case models. More specifically, we first proposed a defect taxonomy defining 94 defect types, based on the IEEE Std. 830-1998 standard. Second, we systematically applied the basic guide words of the standardized Hazard and Operability Study (HAZOP) methodology to define 191 mutation operators. Last, we defined a set of guidelines for devising defect seeding strategies. The proposed methodology was evaluated by a real world case study and six case studies from the literature. Results show that all the derived mutation operators for Restricted Use Case Modelling (RUCM) models are feasible to apply and the defect taxonomy is the most comprehensive one to compare with the literature.},
author = {Zhang, Huihui and Yue, Tao and Ali, Shaukat and Liu, Chao},
doi = {10.1145/2976767.2976784},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/zhang2016.pdf:pdf},
isbn = {9781450343213},
journal = {Proceedings - 19th ACM/IEEE International Conference on Model Driven Engineering Languages and Systems, MODELS 2016},
keywords = {Mutation analysis,Requirements inspection,Restricted use case modeling (RUCM)},
pages = {363--373},
title = {{Towards mutation analysis for use cases}},
year = {2016}
}
@article{Ruy2015,
abstract = {Many efforts have been made for modeling and standardizing software processes. ISO/IEC JTC1/SC7, the ISO sub-committee responsible for software and systems engineering, is one of the most important groups devoted to this task. However, standards developed by this committee are frequently inconsistent and even contradictory. This led to the need for an ISO Study Group to investigate the creation of an ontological infrastructure to establish a common conceptualization for underpinning all SC7 standards. This ISO initiative is a work in progress, which has focused on the software process domain and, in particular, considering the ISO/IEC 24744 standard. In this paper, we advocate in favor of using an Ontology Pattern Language (OPL) as the main component of this ontological infrastructure. We present ISP-OPL (ISO-based Software Process OPL), an OPL that can be applied as a basis for harmonizing software process-related standards, favoring reuse when building aligned specific software process ontologies for SE sub-domains. In order to illustrate its application, we also present an ontology about the Requirements Engineering process, developed by using ISP-OPL. Copyright is held by the authors.},
author = {Ruy, Fabiano B. and Falbo, Ricardo A. and Barcellos, Monalessa P. and Guizzardi, Giancarlo},
doi = {10.1145/2695664.2695796},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/ruy2015.pdf:pdf},
isbn = {9781450331968},
journal = {Proceedings of the ACM Symposium on Applied Computing},
keywords = {Ontology pattern language,Ontology patterns,Semantic interoperability,Software process,Standards harmonization},
pages = {388--395},
title = {{Towards an ontology pattern language for harmonizing software process related ISO standards}},
volume = {13-17-Apri},
year = {2015}
}
@article{DaSilva2017,
abstract = {Since the advent of software product lines (SPLs), variability techniques have provided for commonality and variability modeling of functionally similar products, within a given domain. However, variability modeling proposals so far have mostly been targeted at system features, rather than its requirements, stemming from the fact that features are often closer to stakeholders' perception and understanding of variability. Given the importance that a well-defined system requirements specifica-tion (SRS) represents to the success of a project, this paper pro-poses an innovative approach for modeling and managing varia-bility at the SRS level, based on the Common Variability Lan-guage (CVL) which is the OMG proposal for a domain-independent variability modeling standard. This approach has been implemented as a core feature of the ITBox system, a Web-based collaborative platform for the management of SRSs.},
author = {{Da Silva}, Alberto Rodrigues and Fernandes, Jo{\~{a}}o and Azevedo, Sofia},
doi = {10.1109/REW.2017.59},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/silva2017.pdf:pdf},
isbn = {9781538634882},
journal = {Proceedings - 2017 IEEE 25th International Requirements Engineering Conference Workshops, REW 2017},
keywords = {Product line,Requirements specification,Reusability,Variability modeling},
pages = {240--247},
title = {{Variability aspects at a textual requirements specification level}},
year = {2017}
}
@article{Slhoub2017,
abstract = {The lack of process standardization in the development of multi-agent systems (MAS) causes a great deal of difficulty for developers in addressing major development phases, such as requirements analysis. Instead, such MAS infrastructure is generally attended to in an ad-hoc fashion and important aspects of requirements analysis are often neglected altogether. The IEEE Std 830 model plays a key role in standardizing requirement specifications (SRS) for complex development of conventional software. Knowing that MAS are a natural and logical evolution of the conventional software development paradigms, we believe that the MAS requirement phase can thoroughly benefit from applying such a specific standard model in such a way that results in a high-quality and more accepted SRS artifact. Our purpose in this paper is to utilize and extend the IEEE Std 830-2009 model to specify requirements of multi-agent systems.},
author = {Slhoub, Khaled and Carvalho, Marco and Bond, Walter},
doi = {10.1109/UEMCON.2017.8249021},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/slhoub2017.pdf:pdf},
isbn = {9781538611043},
journal = {2017 IEEE 8th Annual Ubiquitous Computing, Electronics and Mobile Communication Conference, UEMCON 2017},
keywords = {IEEE std 830,Multi-agent systems,Software engineering,Software requirements specification},
pages = {179--185},
title = {{Recommended practices for the specification of multi-agent systems requirements}},
volume = {2018-Janua},
year = {2017}
}
@article{Takoshima2018,
abstract = {In order to appropriately define and share the requirements among stakeholders involved in software development, a model of Software Requirements Specification (SRS), which defines requirement items and their organization, is required. There exist a number of models of SRS such as the one proposed by ISO 29148. However, they are generic and not enough to represent domain-specific requirements. In this paper, we propose a systematic method to design domain-specific models of SRS by extending the existing models of SRS with requirement items for domain-specific requirements. The proposed method derives domain-specific requirement items that should be added to the reference model from the stakeholder concerns about the domain characteristics. We apply the proposed method to the automotive software domain and evaluate its effectiveness.},
author = {Takoshima, Akiyuki and Aoyama, Mikio},
doi = {10.1109/APSEC.2018.00069},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/takoshima2018.pdf:pdf},
isbn = {9781728119700},
issn = {15301362},
journal = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
keywords = {Software Requirements Specification, SRS, Quality},
pages = {542--550},
publisher = {IEEE},
title = {{A Design Method for Domain-Specific Models of Software Requirements Specification Based on Stakeholders' Concerns}},
volume = {2018-Decem},
year = {2018}
}
@article{Medeiros2018,
abstract = {Agile Software Development (ASD) has several limitations concerning its requirements engineering activities. Improving the quality of Software Requirements Specifications (SRSs) in ASD may help to gain a competitive advantage in the software industry. Based on the findings of a Systematic Mapping study, six industrial case studies in different contexts were conducted to investigate and characterize the requirements specification activity in ASD. Data collected from documents, observations, and interviews with software engineers were triangulated, analyzed, and synthesized using Grounded Theory and Meta-Ethnography. The analysis and cross-synthesis of the six case studies resulted in a model describing the phenomenon. This model defines the simplicity and objectivity as essential quality factors of SRSs in ASD. The main factors that affect the SRSs quality in ASD projects are related to their customer-driven nature that leads to prolix SRSs, hindering its understanding from the developer perspective. The emerged model is supported by explanations and provides a deeper understanding of the requirements specification activity in ASD. This creates opportunities for further studies and improvements in SRSs for ASD in industry.},
author = {Medeiros, Juliana and Vasconcelos, Alexandre and Silva, Carla and Goul{\~{a}}o, Miguel},
doi = {10.1016/j.jss.2018.04.064},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/medeiros2018.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Agile Requirements Engineering,Agile methods,Empirical study,Requirements specification},
pages = {171--194},
title = {{Quality of software requirements specification in agile projects: A cross-case analysis of six companies}},
volume = {142},
year = {2018}
}
@article{Medeiros2020,
abstract = {Context: An inadequate requirements specification activity acts as a catalyst to other problems, such as low team productivity and difficulty in maintaining software. Although Agile Software Development (ASD) has grown in recent years, research pointed out several limitations concerning its requirements engineering activities, such as Software Requirements Specification (SRS) provided in high level and targeted to the customer, lack of information required to perform design activities and low availability of the customer. To overcome these issues, the RSD (Requirements Specification for Developers) approach was proposed to create an SRS that provides information closer to development needs. In addition, existing literature reviews identify a demand for more empirical studies on the requirements specification activity in ASD. Objective: Face to this, this work presents the evaluation of the RSD approach with respect to how it affects the teamwork and to identify its strengths and limitations. Methods: This evaluation was performed by means of two industrial case studies conducted using a multiple-case design, focusing on software engineers as the analysis unit. Data were collected during 15 months from documents, observations, and interviews. They were triangulated, analyzed, and synthesized using techniques of grounded theory. Results: The findings pointed out that the readability of SRS was compromised when several requirements are specified in the same RSD artifact. Evaluation also indicated the need of prioritization and categorization of the acceptance criteria, a tool for creating, searching and tracing the artifacts, and obtaining acceptance tests from acceptance criteria. On the other hand, the findings showed that the practices used to specify requirements using the RSD approach have the potential to produce a more objective SRS, tailored for the development team. Conclusion: As a consequence, the structure of the RSD artifact was considered as a factor that improved the team performance in the two case studies.},
author = {Medeiros, Juliana and Vasconcelos, Alexandre and Silva, Carla and Goul{\~{a}}o, Miguel},
doi = {10.1016/j.infsof.2019.106194},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/medeiros2019.pdf:pdf},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Agile software development,Empirical software engineering,Software requirements specification},
pages = {106194},
publisher = {Elsevier B.V.},
title = {{Requirements specification for developers in agile projects: Evaluation by two industrial case studies}},
url = {https://doi.org/10.1016/j.infsof.2019.106194},
volume = {117},
year = {2020}
}
@article{Mokos2020,
abstract = {System requirements define conditions and capabilities to be met by a system under design. They are a partial definition in natural language, with inevitable ambiguities. Formalisation concerns with the transformation of requirements into a specification with unique interpretation, for resolving ambiguities, underspecified references and for assessing whether requirements are consistent, correct (i.e. valid for an acceptable solution) and attainable. Formalisation and validation of system requirements provides early evidence of adequate specification, for reducing the validation tests and high-cost corrective measures in the later system development phases. This article has the following contributions. First, we characterise the specification problem based on an ontology for some domain. Thus, requirements represent a particular system among many possible ones, and their specification takes the form of mapping their concepts to a semantic model of the system. Second, we analyse the state-of-the-art of pattern-based specification languages, which are used to avoid ambiguity. We then discuss the semantic analyses (missing requirements, inconsistencies etc.) supported in such a framework. Third, we survey related research on the derivation of formal properties from requirements, i.e. verifiable specifications that constrain the system's structure and behaviour. Possible flaws in requirements may render the derived properties unsatisfiable or not realizable. Finally, this article discusses the important challenges for the current requirements analysis tools, towards being adopted in industrial-scale projects.},
author = {Mokos, Konstantinos and Katsaros, Panagiotis},
doi = {10.1016/j.array.2020.100030},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/mokos2020.pdf:pdf},
issn = {25900056},
journal = {Array},
keywords = {requirement formalisation,requirement speci fi cation},
number = {January},
pages = {100030},
publisher = {Elsevier Ltd},
title = {{A survey on the formalisation of system requirements and their validation}},
url = {https://doi.org/10.1016/j.array.2020.100030},
volume = {7},
year = {2020}
}
@article{Thitisathienkul2015,
abstract = {The Software Requirements Specifications document (SRS) is used to collect the user requirements, which is used as an input for development process, and as a baseline for verifying the correctness of the software product occurring at each step throughout the software development process. It has been found that many organizations cannot deliver software products that satisfy the actual requirements of the customers, due to defects that frequently occur in the SRS, especially the use of ambiguous natural language in the requirements specifications and the inappropriate document structure, which negatively affects the software quality. Therefore, this research presents a method for objectively assessing the quality of the SRS for use of natural language in requirements specification, document structure, and overall document quality, by directly considering three characteristics of the document: unambiguous, verifiable and modifiable, to indicate the quality of the document and defects that appear during the software requirements engineering step. The process assessment model is applied as a framework for assessing the quality of the SRS, and the measurement process model and measurement information model are used as approaches for proposing a method for SRS quality assessment and defining the metric, respectively, using Pearson's correlation coefficient as the criterion for verifying the validity of the results obtained from assessing the SRS using the proposed method, indicating that the results obtained from the quality assessment reflect the quality of the SRS, as well as the apparent defects.},
author = {Thitisathienkul, Patra and Prompoon, Nakornthip},
doi = {10.1109/TSA.2015.19},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/Qualyti Asegment.pdf:pdf},
isbn = {9781467395816},
journal = {Proceedings - 2nd International Conference on Trustworthy Systems and Their Applications, TSA 2015},
keywords = {Document Characteristics,Document Structure,Quality Assessment Method,SRS Quality Assessment},
pages = {51--60},
title = {{Quality Assessment Method for Software Requirements Specifications Based on Document Characteristics and Its Structure}},
year = {2015}
}
@article{Halim2019,
abstract = {Requirements engineering is the most important stage in software engineering, one of which is to carry out specifications on requirements. Errors that occur at this stage will have a very bad impact on the next stages. A mistake that often occurs is a misunderstanding between stakeholders regarding the document specifications, and this is due to different backgrounds or fields of science. In addition, errors can also occur when making specification documents, for example, there are still non-atomic requirements in the document. Non-atomic requirements are a statement of requirements in which there is not only one element/function of the system. This research was conducted to develop a model that can detect non-atomic requirements in the software specification requirements written in natural languages. The initial stage of this research was to make a list of expert annotations (corpus) containing statements of atomic and non-atomic requirements. This Corpus later used as training data and test data in this study. Based on the corpus created, feature extraction and keyword generation carried out. The best model built in this research was produced by the classification method that used the Bayes Net algorithm. The result of the classification model was evaluated against human annotator using Cohen Kappa. The reliability of the model is considered fair for non-balance data in detecting non-atomic requirements in the software requirements specification. The reliability of the model is considered moderate for balance data in detecting non-atomic requirements.},
author = {Halim, Fahrizal and Siahaan, Daniel},
doi = {10.1109/ICORIS.2019.8874888},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/halim2019.pdf:pdf},
isbn = {9781728114729},
journal = {2019 1st International Conference on Cybernetics and Intelligent System, ICORIS 2019},
keywords = {natural language,non-atomic requirements,software requirements specifications,text classification},
number = {August},
pages = {269--273},
publisher = {IEEE},
title = {{Detecting Non-Atomic Requirements in Software Requirements Specifications Using Classification Methods}},
volume = {1},
year = {2019}
}
@article{LandhauÃŸer2015,
abstract = {Nominalizations in natural language requirements specifications can lead to imprecision. For example, in the phrase "transportation of pallets" it is unclear who transports the pallets from where to where and how. Guidelines for requirements specifications therefore recommend avoiding nominalizations. However, not all nominalizations are problematic. We present an industrial-strength text analysis tool called DeNom, which detects problematic nominalizations and reports them to the user for reformulation. DeNom uses Stanford's parser and the Cyc ontology. It classifies nominalizations as problematic or acceptable by first detecting all nominalizations in the specification and then subtracting those which are sufficiently specified within the sentence through word references, attributes, nominal phrase constructions, etc. All remaining nominalizations are incompletely specified, and are therefore prone to conceal complex processes. These nominalizations are deemed problematic. A thorough evaluation used 10 real-world requirements specifications from Daimler AG consisting of 60,000 words. DeNom identified over 1,100 nominalizations and classified 129 of them as problematic. Only 45 of which were false positives, resulting in a precision of 66{\%}. Recall was 88{\%}. In contrast, a naive nominalization detector would overload the user with 1,100 warnings, a thousand of which would be false positives.},
author = {L{\"{a}}ndh{\"{a}}u{\ss}er, Mathias and K{\"{o}}rner, Sven J. and Tichy, Walter F. and Keim, Jan and Krisch, Jennifer},
doi = {10.1109/AIRE.2015.7337623},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/landhausser2015.pdf:pdf},
isbn = {9781509001255},
journal = {2nd International Workshop on Artificial Intelligence for Requirements Engineering, AIRE 2015 - Proceedings},
keywords = {Context,Distortion,Headphones,Inspection,Natural languages,Pragmatics,Writing},
pages = {9--16},
title = {{DeNom: A tool to find problematic nominalizations using NLP}},
year = {2015}
}
@article{Lindoerfer2017,
abstract = {Introduction Patient registries are instrumental for medical research. Often their structures are complex and their implementations use composite software systems to meet the wide spectrum of challenges. Commercial and open-source systems are available for registry implementation, but many research groups develop their own systems. Methodological approaches in the selection of software as well as the construction of proprietary systems are needed. We propose an evidence-based checklist, summarizing essential items for patient registry software systems (CIPROS), to accelerate the requirements engineering process. Methods Requirements engineering activities for software systems follow traditional software requirements elicitation methods, general software requirements specification (SRS) templates, and standards. We performed a multistep procedure to develop a specific evidence-based CIPROS checklist: (1) A systematic literature review to build a comprehensive collection of technical concepts, (2) a qualitative content analysis to define a catalogue of relevant criteria, and (3) a checklist to construct a minimal appraisal standard. Results CIPROS is based on 64 publications and covers twelve sections with a total of 72 items. CIPROS also defines software requirements. Comparing CIPROS with traditional software requirements elicitation methods, SRS templates and standards show a broad consensus but differences in issues regarding registry-specific aspects. Discussion Using an evidence-based approach to requirements engineering for registry software adds aspects to the traditional methods and accelerates the software engineering process for registry software. The method we used to construct CIPROS serves as a potential template for creating evidence-based checklists in other fields. Conclusion The CIPROS list supports developers in assessing requirements for existing systems and formulating requirements for their own systems, while strengthening the reporting of patient registry software system descriptions. It may be a first step to create standards for patient registry software system assessments.},
author = {Lindoerfer, Doris and Mansmann, Ulrich},
doi = {10.1016/j.jbi.2017.05.013},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/lindoerfer2017.pdf:pdf},
issn = {15320464},
journal = {Journal of Biomedical Informatics},
keywords = {Checklist,Evidence-based requirements engineering,Patient registry software system,Technical requirements},
pages = {147--153},
publisher = {Elsevier Inc.},
title = {{Enhancing requirements engineering for patient registry software systems with evidence-based components}},
url = {http://dx.doi.org/10.1016/j.jbi.2017.05.013},
volume = {71},
year = {2017}
}
@article{Marko2015,
abstract = {Requirements engineering is still a very challenging issue. This is true for most embedded systems and especially for safety-critical ones. A good requirements engineering process is vital for the development of high quality products, but these systems are often highly complex which complicates the respective activities. The use of natural language requirements is common practice, because they are easy to use and understand for people working in different engineering disciplines. However, natural language is ambiguous and vague and may lead to misunderstandings and incorrect implementations. Another big challenge is the often loose coupling of requirements and other development artifacts which hinders traceability and thus impact analysis. This paper presents an approach based on the Xtext framework for the implementation of a restricted requirements language to support engineers in writing requirements with higher quality. In order to improve tool integration, the approach supports OSLC (Open Services for Lifecycle Collaboration), which is a promising method to better support traceability using linked data principles. By using OSLC it is possible to easily extend existing requirements management tools with our proposed implementation for requirements semi-formalization as long as requirements management tools provide the respective OSLC interface. Finally, we will demonstrate our concepts using an example from the automotive domain. The example shows how the tool implementation can be integrated in a tool chain.},
author = {Marko, Nadja and Leitner, Andrea and Herbst, Beate and Wallner, Alfred},
doi = {10.1109/SEAA.2015.11},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/marko2015.pdf:pdf},
isbn = {9781467375856},
journal = {Proceedings - 41st Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2015},
keywords = {Eclipse,Model-based Engineering,OSLC,Requirements Specification,Semi-formal Requirements,Xtext},
pages = {143--150},
title = {{Combining Xtext and OSLC for Integrated Model-Based Requirements Engineering}},
year = {2015}
}
@article{DaSilva2017a,
abstract = {System requirements specification describes technical concerns of a system and is used throughout the project life-cycle. Requirements specification helps sharing the system vision among its stakeholders, as well facilitating the communication, project management and system development processes. For an effective communication, everyone communicates by means of a common language, and natural language provides the foundations for such language. Although natural language is the most common and preferred form of requirements representation, it also exhibits intrinsic characteristics that often present themselves as the root cause of many requirements quality problems, such as incorrectness, inconsistency, incompleteness and ambiguousness. This paper presents the RSL (short name for "Requirements Specification Language") which is a language to improve the production of requirements specifications in a more systematic, rigorous and consistent way. RSL includes constructs logically arranged into views according to the specific requirement engineering concerns they address. These constructs are defined as linguistic patterns and are represented textually by multiple linguistic styles. Due to space constraints, this paper focuses only on its business level constructs and views, namely on glossary terms, stakeholders, business goals, processes, events and flows. RSL can be used and applied by different types of users such as requirement engineers, business analysts, or domain experts. They can produce system requirements specifications with RSL at different level of detail, considering different writing styles and different types of requirements (e.g., business goals, system goals, functional requirements, quality requirements, constraints, user stories, and use cases). In addition, they can use other types of constructs (e.g., terms, stakeholders, actors, data entities) that, in spite of not being requirements, are important to complement and enrich the specification of such requirements. Based on a simple running example, we also show how RSL users (i.e., requirements engineers and business analysts) can produce requirements specifications in a more systematic and rigorous way.},
author = {{Da Silva}, Alberto Rodrigues},
doi = {10.1145/3147704.3147728},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/dasilva2017.pdf:pdf},
isbn = {9781450348485},
journal = {ACM International Conference Proceeding Series},
keywords = {Linguistic patterns,RSL,Requirements patterns,Requirements specification},
number = {I},
pages = {1--27},
title = {{Linguistic patterns and linguistic styles for requirements specification (I): An application case with the rigorous rsl/business-level language}},
volume = {Part F1320},
year = {2017}
}
@article{Echeverria2017,
abstract = {Textual description of requirements is a specification technique that is widely used in industry, where time is key for success. How requirements are specified textually greatly depends on human factors. In order to study how requirements processing is affected by the level of detail in textual descriptions, this paper compares enriched textual requirements specifications with non-enriched ones. To do this, we have conducted an experiment in industry with 19 engineers of CAF (Construcciones y Auxiliares de Ferrocarril), which is a supplier of railway solutions. The experiment is a crossover design that analyzes efficiency, effectiveness, and perceived difficulty starting from a written specification of requirements that subjects must process in order to build software models. The results show that effectiveness and efficiency for enriched requirements are better, while non-enriched requirements are slightly more difficult to deal with. Therefore, even though enriched requirements require more time to be specified, the results are more successfully when using them.},
author = {Echeverria, Jorge and Perez, Francisca and Panach, Jose Ignacio and Cetina, Carlos and Pastor, Oscar},
doi = {10.1109/ESEM.2017.41},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/echeverria2017.pdf:pdf},
isbn = {9781509040391},
issn = {19493789},
journal = {International Symposium on Empirical Software Engineering and Measurement},
keywords = {Controlled Experiment,Model-Based Software Development,Software Requirements},
pages = {277--286},
title = {{The Influence of Requirements in Software Model Development in an Industrial Environment}},
volume = {2017-Novem},
year = {2017}
}
@article{Boulanger2018,
abstract = {Abstract: In this chapter, we are going to clarify what a specification is and what the underlying difficulties in establishing a good specification are. The specification of a system, subsystem, equipment and/or a software application describes what is expected of the element to be implemented in terms of the services and conditions under which they are provided. In the following, we will focus on the implementation of a specification of a software application even if several aspects and/or concepts are applicable to any type of specification.},
author = {Boulanger, Jean-Louis},
doi = {10.1016/b978-1-78548-119-2.50004-2},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/boulanger2018.pdf:pdf},
journal = {Certifiable Software Applications 3},
pages = {43--73},
title = {{Requirements Specification of a Software Application}},
year = {2018}
}
@article{Giachetti2017,
abstract = {Goal-oriented requirements engineering promotes the use of goals to elicit, elaborate, structure, specify, analyze, negotiate, document, and modify requirements. Thus, goal-oriented specifications are essential for capturing the objectives that the system to be developed should achieve. However, the application of goal-oriented specifications into model-driven development (MDD) processes is still handcrafted, not aligned in the automated flow from models to code. In other words, the experience of analysts and designers is necessary to manually transform the input goal-oriented models into system models for code generation (models compilation). Some authors have proposed guidelines to facilitate and partially automate this translation, but there is a lack of techniques to assess the adequacy of goal-oriented models as starting point of MDD processes. In this paper, we present and evaluate a verification approach that guarantees the automatic, correct, and complete transformation of goal-oriented models into design models used by specific MDD solutions. In particular, this approach has been put into practice by adopting a well-known goal-oriented modeling approach, the i* framework, and an industrial MDD solution called Integranova.},
author = {Giachetti, Giovanni and Mar{\'{i}}n, Beatriz and L{\'{o}}pez, Lidia and Franch, Xavier and Pastor, Oscar},
doi = {10.1016/j.is.2016.06.011},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/giachetti2016.pdf:pdf},
issn = {03064379},
journal = {Information Systems},
keywords = {Goal-oriented requirements,Model-driven development,Verification approach,i* framework},
pages = {41--62},
publisher = {Elsevier},
title = {{Verifying goal-oriented specifications used in model-driven development processes}},
url = {http://dx.doi.org/10.1016/j.is.2016.06.011},
volume = {64},
year = {2017}
}
@article{Ghazel2015,
abstract = {Processing specifications is an issue of crucial importance when developing critical complex systems. In particular, establishing rigorous specifications broadly impacts the subsequent engineering phases. This paper discusses a refinement technique for processing informal specifications expressed in a literal shape, with the aim to generate formal specifications appropriate to automatic processing. The developed technique carries out an iterative process which relies on a set of basic refinement patterns that we have established, and ends up with a formalization step which actually generates logical CTL* formulas. Furthermore, the method implements traceability facilities, which allow for a tidy backtracking of the whole process. The concepts introduced to set up the various mechanisms are discussed and a case study featuring an embedded railway control system is used to illustrate our technique.},
author = {Ghazel, Mohamed and Yang, Jing and El-Koursi, El-Miloudi},
doi = {10.1016/j.jides.2015.11.001},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/ghazel2015.pdf:pdf},
issn = {23526645},
journal = {Journal of Innovation in Digital Ecosystems},
keywords = {requirement engineering,requirement re fi nement},
number = {1-2},
pages = {32--44},
publisher = {Elsevier B.V.},
title = {{A pattern-based method for refining and formalizing informal specifications in critical control systems}},
url = {http://dx.doi.org/10.1016/j.jides.2015.11.001},
volume = {2},
year = {2015}
}
@article{Avdeenko2015,
abstract = {The paper presents a knowledge-based approach to requirements engineering process. We propose an ontology as a tool for requirements specification verification and validation. Requirements types are the classes of the ontology. Requirements statements are the instances. A special structure of classes, the Prot{\'{e}}g{\'{e}} tool 'DL Query', and relations implemented through a set of slots are intended for checking completeness and consistency of requirements specification.},
author = {Avdeenko, Tatiana and Pustovalova, Natalia},
doi = {10.1109/SIBCON.2015.7147184},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/avdeenko2015.pdf:pdf},
isbn = {9781479971022},
journal = {2015 International Siberian Conference on Control and Communications, SIBCON 2015 - Proceedings},
keywords = {knowledge-based system,ontology,requirements engineering,software requirements specification},
title = {{The ontology-based approach to support the completeness and consistency of the requirements specification}},
year = {2015}
}
@article{Bharadwaj2018,
abstract = {Requirements Engineering was in the forefront for a period of 25 years from 1970. Requirements specification development is a field in which several contributions have been made over the years. It is difficult to analyze all the techniques, to classify them, to determine and compare their advantages and disadvantages. The paper chooses to look at three selected techniques - one each of informal, formatted (structured informal) and formal types - of those that have been presented over the years. The paper looks at one of the first techniques given way back in 1970s for a formatted one and has chosen the Transnet approach as formal method for expressing an ATM system requirements specification. The formal type of requirement specifications is also applied to another example, Library system, wherein inconsistency and incompleteness in the drawn Petri net is determined and corrected. The paper thus demonstrates the usage of Petri nets for developing complete, unambiguous, correct, and consistent requirement specification.},
author = {Bharadwaj, A. Keshav and Agrawal, V. K.},
doi = {10.1109/ICCECE.2017.8526221},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/bharadwaj2017.pdf:pdf},
isbn = {9781538611760},
journal = {2017 International Conference on Computer, Electrical and Communication Engineering, ICCECE 2017},
keywords = {Petri nets,Requirement specification techniques,Requirements engineering},
pages = {1--8},
publisher = {IEEE},
title = {{Improvement in requirement specifications using petri nets}},
year = {2018}
}
@article{Blake2015,
abstract = {Context: Software Requirement Specifications (SRSs) are central to software lifecycles. An SRS defines the functionalities and constraints of a desired software system, hence it often serves as reference for further development. Software lifecycles concerned with the conversion of traditional systems into more serviceoriented infrastructures can benefit from understanding potential shared capabilities through the analysis of SRSs. Objective: In this paper, we propose an automated approach capable of recommending shared software services from multiple text-based SRSs created by different organizations. Our goal is to facilitate the identification of overlapping requirements in these specifications and subsequently recommend shared components, which promotes software reuse. The shared components can be implemented as services that are invoked across different systems. Method: Our approach leverages the syntactic similarity of the SRS text augmented with semantic information derived from the WordNet database. This work extends our earlier studies by introducing an algorithm that utilizes noun, verb, and predicate relations to enhance the discovery of equivalent requirements and the recommendation of reusable services. A prototype system is implemented to evaluate the approach and experimental results have shown effective recommendation of requirements and their realized shared services. Results: Our automatic recommendation approach generates recommendations in few minutes compared to 9 h when services are manually inspected by developers. Our approach is also able to recommend services that are overlooked by the same developers, and to identify similarity between requirements even if these requirements are reworded. Conclusion: We show through experimentation that we can efficiently recommend services by leveraging both the syntactical structure and the semantic information of a requirements document and that our approach is more effective than the manual selection of services by experts. We also show that our approach is effective in detecting similar requirements for a single system and hence discovering opportunities for software reuse.},
author = {Blake, M. Brian and Saleh, Iman and Wei, Yi and Schlesinger, Ian D. and Yale-Loehr, Alexander and Liu, Xuanzhe},
doi = {10.1016/j.infsof.2014.05.019},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/brianblake2015.pdf:pdf},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Requirements engineering,Shared service discovery,Similarity analysis},
number = {1},
pages = {392--404},
publisher = {Elsevier B.V.},
title = {{Shared service recommendations from requirement specifications: A hybrid syntactic and semantic toolkit}},
url = {http://dx.doi.org/10.1016/j.infsof.2014.05.019},
volume = {57},
year = {2015}
}
@article{Ali2018,
abstract = {The failure and success of any software mainly depends on a technical document known as Software Requirement Specification (SRS) document, as it contains all requirements and features of the product. In the past, many developments had been done to improve the quality of the SRS, with respect to different attributes of the product, but the product success rate is not satisfactory and the room for improvement is still there. We have developed a different approach to resolve those issues. Our methodology consist of four processes i.e. Parsing Requirement (PR), Requirement Mapping using Matrix (RMM), Addition of Requirements in SRS template and Third Party Inspection. Requirement Engineering Process will provide the required inputs to PR after the implementation of its ontology rules completion of requirements will be achieved. RMM will be generated to minimize ambiguities and incorrectness with concerns of all stakeholders. Outputs of the previous processes will be added to IEEE standard format. A third party inspection will be conducted to check the requirements of the client and SRS. After inspecting SRS using inspection models and assigning Total Quality Score (TQS) third party will submit a detailed report to team of Requirement Engineers (RE). This practice will not only identify the problem but will solve the issue on its way.},
author = {Ali, Syed Waqas and Ahmed, Qazi Arbab and Shafi, Imran},
doi = {10.1109/ICEET1.2018.8338619},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/ali2018.pdf:pdf},
isbn = {9781538621707},
journal = {2018 International Conference on Engineering and Emerging Technologies, ICEET 2018},
keywords = {Parsing Requirement,Requirement Engineering,Requirement Mapping Matrix,Software Requirement Specification,Total Quality Score},
pages = {1--6},
title = {{Process to enhance the quality of software requirement specification document}},
volume = {2018-Janua},
year = {2018}
}
@article{Antonino2015,
abstract = {Despite imposing strict recommendations to be considered during the specification of safety requirements, standards and regulations do not provide guidance to be used throughout the creation of these artifacts. In practice, each safety requirement specification has heterogeneous structures, usually based on the experience of the engineers involved in the specification process. Consequently, it becomes difficult to ensure that the standards' recommendations were considered, such as the existence of evidences that the requirements are properly traceable to other development artifacts such as architecture and failure propagation models. To address this challenge, we defined the Parameterized Safety Requirements Templates, which is a controlled natural language based approach to support engineers in elaborating the content description of safety requirements specifications, ensuring that elements of the architectural design and of the failure propagation models are explicitly considered throughout the textual description of the safety requirements, and are therefore properly traced. The Parameterized Safety Requirements Templates have been used in different domains such as automotive, avionics, and medical devices, and have proven to be effective in improving artifact trace ability. In this paper, we present their usage in the context of an industrial Automated External Defibrillator system.},
author = {Antonino, Pablo Oliveira and Trapp, Mario and Barbosa, Paulo and Sousa, Luana},
doi = {10.1109/SST.2015.12},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/antonino2015.pdf:pdf},
isbn = {9780769555935},
journal = {Proceedings - 2015 IEEE/ACM 8th International Symposium on Software and Systems Traceability, SST 2015},
keywords = {failure propagation model,safety requirement architecture,traceability},
pages = {29--35},
title = {{The Parameterized Safety Requirements Templates}},
year = {2015}
}
@article{VanRooijen2017,
abstract = {Bridging the gap between informal, imprecise, and vague user requirements descriptions and precise formalized specifications is the main task of requirements engineering. Techniques such as interviews or story telling are used when requirements engineers try to identify a user's needs. The requirements specification process is typically done in a dialogue between users, domain experts, and requirements engineers. In our research, we aim at automating the specification of requirements. The idea is to distinguish between untrained users and trained users, and to exploit domain knowledge learned from previous runs of our system. We let untrained users provide unstructured natural language descriptions, while we allow trained users to provide examples of behavioral descriptions. In both cases, our goal is to synthesize formal requirements models similar to statecharts. From requirements specification processes with trained users, behavioral ontologies are learned which are later used to support the requirements specification process for untrained users. Our research method is original in combining natural language processing and search-based techniques for the synthesis of requirements specifications. Our work is embedded in a larger project that aims at automating the whole software development and deployment process in envisioned future software service markets.},
author = {{Van Rooijen}, Lorijn and B{\"{a}}umer, Frederik Simon and Platenius, Marie Christin and Geierhos, Michaela and Hamann, Heiko and Engels, Gregor},
doi = {10.1109/REW.2017.26},
file = {:C$\backslash$:/Users/joseg/Downloads/documentos/vanrooijen2017.pdf:pdf},
isbn = {9781538634882},
journal = {Proceedings - 2017 IEEE 25th International Requirements Engineering Conference Workshops, REW 2017},
pages = {379--385},
title = {{From user demand to software service: Using machine learning to automate the requirements specification process}},
year = {2017}
}
